-
  In this file, I check that a stock move with an effective date before an inventory does not modify 
  the available quantity of a product.
  First I'll check that the quantity in stock is 10.0 after the inventory
-
 !python {model: product.product}: |
  ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 13:10:34'}
  products = self.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
  assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10.0 before stock move : %s" % products[0]['qty_available']  
-
  I'll try to create a stock move dated before the inventory, directly in 'done' state.
  Either this must fail, or we must check that the quantity is still correct.
-
  !python {model: stock.move}: |
    from osv import orm
    
    try:
      move_id = self.create(cr, uid, {'product_id': ref('product.product_product_pc1'),
                                      'location_id': ref('stock.stock_location_14'),
                                      'location_dest_id': ref('stock.stock_location_components'),
                                      'product_qty': 17.0,
                                      'prodlot_id': ref('lot_test0'),
                                      'date': '2099-01-01 08:22:17',
                                      'product_uom': ref('product.product_uom_unit'), 
                                      'name': 'Product of test',
                                      'state': 'done'})  
      # I check the available quantity
      product_obj = self.pool.get('product.product')
      ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 15:10:34'}  
      products = product_obj.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
      assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10 after stock move : %s" % products[0]['qty_available']
    except orm.except_orm as e:   
      log("Good ! the stock move creation action has failed : %s" % e)  
-
  I create another Stock Move dated today, in 'draft' state.
-
  !record {model: stock.move, id: draft_stock_move}:
    name: Test draft stock move before inventory date
    location_id: stock.stock_location_components
    location_dest_id: stock.stock_location_7
    product_id: product.product_product_pc1
    prodlot_id : lot_test0
    product_qty: 3.0
    product_uom: product.product_uom_unit
    state: draft
-
  I confirm the Stock Move.
-
  !python {model: stock.move}: |
    self.action_confirm(cr, uid, [ref('draft_stock_move')])
-
  I finish the Stock Move.
  Either this must fail or we must check that the quantity is still correct. 
-    
  !python {model: stock.move}: |
    from osv import orm
    try:
      self.action_done(cr, uid, [ref('draft_stock_move')])
      # I check the available quantity
      products = self.pool.get('product.product').read(
        cr, uid, [ref('product.product_product_pc1')], ['qty_available'],
        context={'location': [ref('stock.stock_location_components')],
                 'to_date': '2099-01-01 15:10:34'})
      assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10 after stock move : %s" % products[0]['qty_available']
    except orm.except_orm as e:
      log("Good ! The Stock Move could not be 'done' : %s" % e)        
-
  I will try to write the stock move with state done.
  Either this must fail or we must check that the quantity is still correct.
-
  I create the move stock in 'done' state after the inventory.   
-
  !record {model: stock.move, id: draft_stock_move}:
    name: Test draft stock move before inventory date
    date: 2099-06-02 09:53:28
    location_id: stock.stock_location_14
    location_dest_id: stock.stock_location_components
    product_id: product.product_product_pc1
    prodlot_id : lot_test0
    product_qty: 10.0
    product_uom: product.product_uom_unit
    state: done
-
  I check the quantity for product is equal to 20.0 after the inventory.  
-
 !python {model: product.product}: |
  products = self.read(cr, uid, [ref('product.product_product_pc1')],['qty_available'],
                       context={'location': [ref('stock.stock_location_components')],
                                'to_date': '2099-12-31 19:10:34'})
  assert products[0]['qty_available'] == 20.0, "Quantity is not equal to 20.0 : %s" % products[0]['qty_available']
