-
  In this file, i check if a stock move made after inventory with effective date before inventory don't modify 
  the available quantity of a product. 
  I create an inventory in a distant future because action_done take current date only 
  and we must check stock move before the inventory.
  First, i create a production lot.
-
  !record {model: stock.production.lot, id: lot_test0}:
    company_id: base.main_company    
    product_id: product.product_product_pc1
-
  .   I create the inventory with 10.0 units of product.
-
  !record {model: stock.inventory, id: stock_inventory_physical0}:
    company_id: base.main_company    
    date: 2099-01-01 12:05:27
    inventory_line_id:
      - company_id: base.main_company
        location_id: stock.stock_location_components
        product_id: product.product_product_pc1
        prod_lot_id : lot_test0
        product_qty: 10.0
        product_uom: product.product_uom_unit      
    name: Initial Stock situation for inventory date tests 
    state: draft 
-
  .   I confirm the inventory.
-   
  !python {model: stock.inventory}: |
      self.action_confirm(cr, uid, [ref('stock_inventory_physical0')])
      self.action_done(cr, uid, [ref('stock_inventory_physical0')])
-
  .   I check the quantity for one product is correct after the inventory.  
-  
 !python {model: product.product}: |
  ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 13:10:34'}
  products = self.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
  assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10.0 before stock move : %s" % products[0]['qty_available']  

-
  I try to create a stock move to add 17.0 units directly on 'done' state.
  Either this must fail or we must check that the quantity is still correct.
-
  !python {model: stock.move}: |
    from osv import orm    
    
    try:
      move_id = self.create(cr, uid, {'product_id': ref('product.product_product_pc1'),
                                      'location_id': ref('stock.stock_location_14'),
                                      'location_dest_id': ref('stock.stock_location_components'),
                                      'product_qty': 17.0,
                                      'date': '2099-01-01 08:22:17',
                                      'product_uom': ref('product.product_uom_unit'), 
                                      'name': 'Product of test',
                                      'state': 'done'})  
      
    except orm.except_orm as e:   
      log("Good ! the stock move creation action has failed : %s" % e)  

    # i check the available quantity
    product_obj = self.pool.get('product.product')
    ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 15:10:34'}  
    products = product_obj.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
    assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10 after stock move : %s" % products[0]['qty_available']
    
-
  I create the move stock record to add 23.0 units on 'draft' state.   
-    
  !record {model: stock.move, id: draft_stock_move}:
    name: Test draft stock move before inventory date
    date: 2099-01-01 09:53:28
    location_id: stock.stock_location_14
    location_dest_id: stock.stock_location_components
    product_id: product.product_product_pc1
    prodlot_id : lot_test0
    product_qty: 23.0
    product_uom: product.product_uom_unit
    state: draft    
    
-
  .   I call the action_confirm method and verify and the action doesn't raise an exception. 
-
  !python {model: stock.move}: |    
    move_obj = self.pool.get('stock.move')
    move_obj.action_confirm(cr, uid, [ref('draft_stock_move')])
-    
  .   I call action_done.
  Either this must fail or we must check that the quantity is still correct. 
-    
  !python {model: stock.move}: |    
    from osv import orm    
    move_obj = self.pool.get('stock.move')    
    try:
      move_obj.action_done(cr, uid, [ref('draft_stock_move')])
    except orm.except_orm as e:
      log("Good ! The stock move done action failed : %s" % e)        

    # No exception : i check the available quantity
    product_obj = self.pool.get('product.product')
    ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 15:10:34'}  
    products = product_obj.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
    assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10 after stock move : %s" % products[0]['qty_available']     
-
  I will try to write the stock move with state done.
  Either this must fail or we must check that the quantity is still correct.
-
  !python {model: stock.move}: |
    from osv import orm    
    try:
      move_id = self.write(cr, uid, [ref('draft_stock_move')], {'state': 'done', 'date': '2099-01-01 09:55:36'})            
    except orm.except_orm as e:
      log("Good ! The stock move write to done has failed : %s" % e) 

    # No exception : i check the available quantity
    product_obj = self.pool.get('product.product')
    ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-01-01 15:10:34'}  
    products = product_obj.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
    assert products[0]['qty_available'] == 10.0, "Quantity is not equal to 10 after stock move : %s" % products[0]['qty_available']
-
  I create the move stock record to add 10.0 units on 'done' state after the inventory.   
-    
  !record {model: stock.move, id: draft_stock_move}:
    name: Test draft stock move before inventory date
    date: 2099-06-02 09:53:28
    location_id: stock.stock_location_14
    location_dest_id: stock.stock_location_components
    product_id: product.product_product_pc1
    prodlot_id : lot_test0
    product_qty: 10.0
    product_uom: product.product_uom_unit
    state: done
      
-
  .   I check the quantity for product is equal to 20.0 after the inventory.  
-  
 !python {model: product.product}: |
  ctx = {'location': [ref('stock.stock_location_components')], 'to_date': '2099-12-31 19:10:34'}
  products = self.read(cr, uid, [ref('product.product_product_pc1')], ['qty_available'], context=ctx)
  assert products[0]['qty_available'] == 20.0, "Quantity is not equal to 20.0 : %s" % products[0]['qty_available'] 