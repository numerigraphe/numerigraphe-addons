-
  This file will test a non exhaustive inventory.
  I will call open_action method and check if state of inventories are 'open'.
-
  !python {model: stock.inventory}: |
    from osv import orm, osv     
    self.action_open(cr, uid, [ref('stock_inventory_location_0')])    
    inventory_state = self.read(cr, uid, [ref('stock_inventory_location_0')], ['state'])[0]['state']
    assert inventory_state == 'open', "Partial inventory have '%s' state. It should be 'open'" % inventory_state    
   
-
  In order, I add products to inventory.
  Adding cpu1.
-
  !record {model: stock.inventory.line, id: lines_inventory_location_cpu1}:
    product_id: product.product_product_cpu1
    product_uom: product.product_uom_unit
    company_id: base.main_company
    inventory_id: stock_inventory_location_0    
    product_qty: 18.0
    location_id: stock.stock_location_components

-
  Adding cpu3.
-
  !record {model: stock.inventory.line, id: lines_inventory_location_cpu3}:
    product_id: product.product_product_cpu3
    product_uom: product.product_uom_unit
    company_id: base.main_company
    inventory_id: stock_inventory_location_0    
    product_qty: 12.0
    location_id: stock.stock_location_components

-
  Adding fan.
-
  !record {model: stock.inventory.line, id: lines_inventory_location_fan}:
    product_id: product.product_product_fan
    product_uom: product.product_uom_unit
    company_id: base.main_company
    inventory_id: stock_inventory_location_0    
    product_qty: 32.0
    location_id: stock.stock_location_components

-
  I will call the function _get_locations_open_inventories and check the result.
  The function will return no locations.
-
  !python {model: stock.inventory}: |
    from osv import orm, osv
    locations = self._get_locations_open_inventories(cr, uid)    
    assert len(locations) == 0, "Function return wrong results : %s" % locations
     
-
  I will call the function onchange_location_id.
  The function must to return true in all test case.  
-
  !python {model: stock.inventory.line}: |
    from osv import orm, osv
    pass
    res = self.onchange_location_id(cr, uid, [], [(6,0,[ref('stock.stock_location_components')])], False, ref('stock.stock_location_components'))
    assert res == True, "The function 'onchange_location_id' should return True and return '%s'" % res
    res = self.onchange_location_id(cr, uid, [], [(6,0,[ref('stock.stock_location_components')])], False, ref('stock.stock_location_14'))
    assert res == True, "The function 'onchange_location_id' should return True and return '%s'" % res

-
  I will call the function _check_inventory.
  The function must return True in all test cases.
-
  !python {model: stock.location}: |
    from osv import orm, osv    
    res = self._check_inventory(cr, uid, ref('stock.stock_location_components'))
    assert res == True, "The function '_check_inventory' should return True and return '%s'" % res
    res = self._check_inventory(cr, uid, ref('stock.stock_location_14'))
    assert res == True, "The function '_check_inventory' should return True and return '%s'" % res
        
-
  I will confirm inventory. 
-    
  !python {model: stock.inventory}: |
    from osv import orm, osv     
    self.action_confirm(cr, uid, [ref('stock_inventory_location_0')])    
    inventory_state = self.read(cr, uid, [ref('stock_inventory_location_0')], ['state'])[0]['state']
    assert inventory_state == 'confirm', "Partial inventory have '%s' state. It should be 'confirm'" % inventory_state

-
  I will validate inventory
-
  !python {model: stock.inventory}: |
    from osv import orm, osv 
    self.action_done(cr, uid, [ref('stock_inventory_location_0')])    
    inventory_state = self.read(cr, uid, [ref('stock_inventory_location_0')], ['state'])[0]['state']
    assert inventory_state == 'done', "Partial inventory have '%s' state. It should be 'done'" % inventory_state    
       
-
  I will verify the quantity for each products.
-    
  !python {model: product.product}: |
    from osv import orm, osv 
    ctx={'location': [ref('stock.stock_location_components')], 'to_date': '2020-12-31 23:59:59'} 
    prod_qty_avail = self.read(cr, uid, [ref('product.product_product_cpu1')], ['qty_available'], context=ctx)[0]['qty_available']
    assert prod_qty_avail == 18.0, "The stock of CPU1 was not set to 18.0 : %s" % prod_qty_avail
    
    prod_qty_avail = self.read(cr, uid, [ref('product.product_product_cpu3')], ['qty_available'], context=ctx)[0]['qty_available']
    assert prod_qty_avail == 12.0, "The stock of CPU3 was not set to 12.0 : %s" % prod_qty_avail
    
    prod_qty_avail = self.read(cr, uid, [ref('product.product_product_fan')], ['qty_available'], context=ctx)[0]['qty_available']
    assert prod_qty_avail == 32.0, "The stock of FAN was not set to 32.0 : %s" % prod_qty_avail
    