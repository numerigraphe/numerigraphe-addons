-
  In this file, i will test the valuation on inventory confirm and test the clean function 
  where inventory is cancelled.
-
  !python {model: stock.inventory}: |
    from osv import orm, osv     
    self.action_confirm(cr, uid, [ref('stock_inventory_valuation0')])    
    parent_state = self.read(cr, uid, [ref('stock_inventory_valuation0')], ['state'])[0]['state']
    assert parent_state == 'confirm', "Parent inventory have '%s' state. It should be 'confirm'" % parent_state
     
    valorisation_id = self.pool.get('stock.inventory.valuation').search(cr, uid, [('inventory_id', '=', ref('stock_inventory_valuation0'))])
    valorisation_infos = self.pool.get('stock.inventory.valuation').read(cr, uid, valorisation_id, ['name', 'product_qty', 'product_id', 'total_valuation'])

    assert valorisation_infos != False, "Valuation is not done !"
    assert valorisation_infos[0]['product_qty'] == 25.0, "Product quantity is '%s', should be '25.0'" % valorisation_infos[0]['product_qty']
    assert valorisation_infos[0]['total_valuation'] == 7500.0, "Product valuation is '%s', should be '7500.0'"
-
  In order, i'll cancel the inventory and check if the valuation has been deleted.
-
  !python {model: stock.inventory}: |
    from osv import orm, osv 
    self.action_cancel_inventary(cr, uid, [ref('stock_inventory_valuation0')]) 
    
    parent_state = self.read(cr, uid, [ref('stock_inventory_valuation0')], ['state'])[0]['state']
    assert parent_state == 'cancel', "Parent inventory have '%s' state. It should be 'cancel'" % parent_state
    
    valorisation_id = self.pool.get('stock.inventory.valuation').search(cr, uid, [('inventory_id', '=', ref('stock_inventory_valuation0'))])
    assert valorisation_id == [], "The valuation is not deleted !"
    
    
    