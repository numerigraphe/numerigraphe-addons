- Test the computation of the potential quantity on mrp_bom_1, a product with a multi-line BOM

- Create a UoM in the category of PCE
- !record {model: product.uom, id: thousand}:
    name: Thousand
    factor: 0.001
    rounding: 0.00
    uom_type: bigger
    category_id: product.product_uom_categ_unit

- Receive enough of the first component to run the BoM 1000x, and check that the potential is unchanged
- !python {model: mrp.bom}: |
    bom = self.browse(cr, uid, [ref('mrp.mrp_bom_1')])[0]
    initial_qty = bom.product_id.potential_qty
    component = bom.bom_lines[0]    
    self.pool.get('stock.move').create(cr, uid, {
      'name': 'Receive first component',
      'product_id': component.product_id.id,
      'product_qty': component.product_qty * 1000,
      'product_uom': component.product_uom.id,
      'location_id': ref('stock.stock_location_suppliers'),
      'location_dest_id': ref('stock.stock_location_stock'),
      'state': 'done',
      })
    # Re-read the potential quantity
    new_qty = self.browse(cr, uid, [bom.id])[0].product_id.potential_qty
    assert new_qty == initial_qty, "Receiving a single component should not change the potential qty (%s instead of %s)" % (new_qty, initial_qty)

- Receive enough of all the components to run the BoM 1000x and check that the potential is correct
- !python {model: mrp.bom}: |
    bom = self.browse(cr, uid, [ref('mrp.mrp_bom_1')])[0]
    initial_qty = bom.product_id.potential_qty
    component = bom.bom_lines[0]
    for component in bom.bom_lines:
      self.pool.get('stock.move').create(cr, uid, {
        'name': 'Receive all components',
        'product_id': component.product_id.id,
        'product_qty': component.product_qty,
        'product_uom': ref('thousand'),
        'location_id': ref('stock.stock_location_suppliers'),
        'location_dest_id': ref('stock.stock_location_stock'),
        'state': 'done',
        })
    # RE-read the potential quantity
    new_qty = self.browse(cr, uid, [bom.id])[0].product_id.potential_qty
    right_qty = initial_qty + bom.product_qty * 1000.0
    print 'right_qty: {0}'.format(right_qty) 
    assert new_qty == right_qty, "The potential qty is incorrect after receiveing all the components (%s instead of %s)" % (new_qty, right_qty)
    # Re-read the potential quantity with a different UoM in the context
    new_qty = self.browse(cr, uid, [bom.id], context={'uom': ref('thousand')})[0].product_id.potential_qty
    right_qty = initial_qty / 1000.0 + bom.product_qty
    assert new_qty - right_qty < 0.0001, "The potential qty is incorrect with another UoM in the context (%s instead of %s)" % (new_qty, right_qty)
